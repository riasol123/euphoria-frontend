name: Deploy to Production

on:
  push:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/euphoria-frontend:latest
        build-args: |
          VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Copy deployment files
      uses: appleboy/scp-action@master
      with:
        host: 62.109.17.167
        username: mari
        key: ${{ secrets.EUPHORIA_DEPLOY_KEY }}
        source: "docker-compose.frontend.yml,nginx.conf"
        target: "/home/mari/euphoria-frontend"
        strip_components: 0

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: 62.109.17.167
        username: mari
        key: ${{ secrets.EUPHORIA_DEPLOY_KEY }}
        script: |
          cd /home/mari/euphoria-frontend
          
          # Создаем файл с переменными окружения
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" > .env
          
          # Останавливаем и удаляем старые контейнеры
          docker-compose -f docker-compose.frontend.yml down || true
          
          # Удаляем старые образы
          docker image prune -f
          
          # Запускаем новые контейнеры
          docker-compose -f docker-compose.frontend.yml pull
          docker-compose -f docker-compose.frontend.yml up -d
          
          # Проверяем статус
          docker-compose -f docker-compose.frontend.yml ps 